import requests
import json
from config_utils import get_config_value

import requests

def get_tableau_token():
    url = f"{get_config_value('TABLEAU_SERVER_URL')}/api/3.21/auth/signin"
    payload = {
        "credentials": {
            "personalAccessTokenName": get_config_value("TABLEAU_PERSONAL_ACCESS_TOKEN_NAME"),
            "personalAccessTokenSecret": get_config_value("TABLEAU_PERSONAL_ACCESS_TOKEN_SECRET"),
            "site": {
                "contentUrl": get_config_value("TABLEAU_SITE_ID")
            }
        }
    }

    headers = {
        "Accept": "application/json",  # Ensures JSON response
        "Content-Type": "application/json"
    }

    r = requests.post(url, json=payload, headers=headers)

    r.raise_for_status()

    try:
        json_data = r.json()
        token = json_data["credentials"]["token"]
        site_id = json_data["credentials"]["site"]["id"]
        return token, site_id
    except ValueError as e:
        print("Failed to decode JSON:", e)
        raise
    except KeyError as e:
        print("Expected key missing in JSON response:", e)
        raise


def run_metadata_graphql(query, variables=None):
    token, site_id = get_tableau_token()
    url = f"{get_config_value('TABLEAU_SERVER_URL')}/api/metadata/graphql"
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-Tableau-Auth": token
    }
    r = requests.post(url, json={"query": query, "variables": variables or {}}, headers=headers)
    r.raise_for_status()
    return r.json()["data"]

DATASOURCE_LIST_QUERY = f"""
query listDatasources {{
  publishedDatasources {{
    name
    description
    luid
  }}
}}
"""

def get_all_datasources():
    data = run_metadata_graphql(DATASOURCE_LIST_QUERY)
    return data["publishedDatasources"]

def get_datasource_query(luid):
    query = f"""
    query datasourceFieldInfo {{
        publishedDatasources(filter: {{ luid: "{luid}" }}) {{
          name
          description
          owner {{
            name
          }}
          fields {{
            name
            isHidden
            description
            descriptionInherited {{
              attribute
              value
            }}
            fullyQualifiedName
            __typename
            ... on AnalyticsField {{
              __typename
            }}
            ... on ColumnField {{
              dataCategory
              role
              dataType
              defaultFormat
              semanticRole
              aggregation
              aggregationParam
            }}
            ... on CalculatedField {{
              dataCategory
              role
              dataType
              defaultFormat
              semanticRole
              aggregation
              aggregationParam
              formula
              isAutoGenerated
              hasUserReference
            }}
            ... on BinField {{
              dataCategory
              role
              dataType
              formula
              binSize
            }}
            ... on GroupField {{
              dataCategory
              role
              dataType
              hasOther
            }}
            ... on CombinedSetField {{
              delimiter
              combinationType
            }}
          }}
        }}
      }}
    """

    return query

def get_datasource_details(ds_id):
    DATASOURCE_DETAIL_QUERY = get_datasource_query(ds_id)
    data = run_metadata_graphql(DATASOURCE_DETAIL_QUERY, {"id": ds_id})
    ds_list = data.get("publishedDatasources", [])
    if not ds_list:
        raise ValueError(f"No datasource found with ID: {ds_id}")
    return ds_list[0]  # Return the first item
